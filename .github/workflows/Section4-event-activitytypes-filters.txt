1.# there are activity types and filters per events to manage when actually your scripts should run
# example on : push to run for every push , if we need to filter for a specific branch then use activity type and filters.


name : project event x
on :
  pull_request:
    types:
     - opened
workflow_dispatch:

2.# here this workflow will trigger on two events ie manuually dispatched or when a pull request is opened

# below is a filter on branch is applied , the WF will trigger only for the specific branches
# apliying filter on pullrequest and push activity types


name : project event x
on :
  pull_request:
    types:
     - opened
    branches:
        - main # main
        - 'dev-*' #dev-main , dev-test
        - 'feat/**' #feat/new feat/new/poc
  workflow_dispatch:
  push:
    branches:
      - main # main
      - 'dev-*' #dev-main , dev-test
      - 'feat/**' #feat/new feat/new/poc

3. event filters ar enot restricted to filter only on branches , instead yo ucan filter on file paths by adding a paths: section
name : project event x
on :
  pull_request:
    types:
     - opened
    branches:
        - main # main
        - 'dev-*' #dev-main , dev-test
        - 'feat/**' #feat/new feat/new/poc
  workflow_dispatch:
  push:
    paths:
      - '**.js' # wf will trigger on push if any file with .js extension is pushed;
    paths-ignore:
      - '.github/workflows/*' # meaning it will ignore if any worfklow file is changed.
    branches:
      - main # main
      - 'dev-*' #dev-main , dev-test
      - 'feat/**' #feat/new feat/new/poc


4. Skipping the commit workflow

# add a specific keyword approved by github present on their website e.g[skip ci] on push it will not trigger the worklfow that it usually does on commit
# git add .
# git commit -m "added comments [skip ci]"
# git push ## now new worflow will be triggerred on this commit
